import { STATE_SIGNAL } from './state-signal';
export function withHooks(hooksOrFactory) {
    return (store) => {
        const storeProps = {
            [STATE_SIGNAL]: store[STATE_SIGNAL],
            ...store.slices,
            ...store.signals,
            ...store.methods,
        };
        const hooks = typeof hooksOrFactory === 'function'
            ? hooksOrFactory(storeProps)
            : hooksOrFactory;
        const createHook = (name) => {
            const hook = hooks[name];
            const currentHook = store.hooks[name];
            return hook
                ? () => {
                    if (currentHook) {
                        currentHook();
                    }
                    hook(storeProps);
                }
                : currentHook;
        };
        return {
            ...store,
            hooks: {
                onInit: createHook('onInit'),
                onDestroy: createHook('onDestroy'),
            },
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2l0aC1ob29rcy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL21vZHVsZXMvc2lnbmFscy9zcmMvd2l0aC1ob29rcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFlLE1BQU0sZ0JBQWdCLENBQUM7QUFzQzNELE1BQU0sVUFBVSxTQUFTLENBQ3ZCLGNBS3VCO0lBRXZCLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRTtRQUNmLE1BQU0sVUFBVSxHQUFHO1lBQ2pCLENBQUMsWUFBWSxDQUFDLEVBQUUsS0FBSyxDQUFDLFlBQVksQ0FBQztZQUNuQyxHQUFHLEtBQUssQ0FBQyxNQUFNO1lBQ2YsR0FBRyxLQUFLLENBQUMsT0FBTztZQUNoQixHQUFHLEtBQUssQ0FBQyxPQUFPO1NBQ2pCLENBQUM7UUFDRixNQUFNLEtBQUssR0FDVCxPQUFPLGNBQWMsS0FBSyxVQUFVO1lBQ2xDLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDO1lBQzVCLENBQUMsQ0FBQyxjQUFjLENBQUM7UUFDckIsTUFBTSxVQUFVLEdBQUcsQ0FBQyxJQUF3QixFQUFFLEVBQUU7WUFDOUMsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFdEMsT0FBTyxJQUFJO2dCQUNULENBQUMsQ0FBQyxHQUFHLEVBQUU7b0JBQ0gsSUFBSSxXQUFXLEVBQUU7d0JBQ2YsV0FBVyxFQUFFLENBQUM7cUJBQ2Y7b0JBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUNuQixDQUFDO2dCQUNILENBQUMsQ0FBQyxXQUFXLENBQUM7UUFDbEIsQ0FBQyxDQUFDO1FBRUYsT0FBTztZQUNMLEdBQUcsS0FBSztZQUNSLEtBQUssRUFBRTtnQkFDTCxNQUFNLEVBQUUsVUFBVSxDQUFDLFFBQVEsQ0FBQztnQkFDNUIsU0FBUyxFQUFFLFVBQVUsQ0FBQyxXQUFXLENBQUM7YUFDbkM7U0FDRixDQUFDO0lBQ0osQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNUQVRFX1NJR05BTCwgU3RhdGVTaWduYWwgfSBmcm9tICcuL3N0YXRlLXNpZ25hbCc7XG5pbXBvcnQge1xuICBFbXB0eUZlYXR1cmVSZXN1bHQsXG4gIFNpZ25hbFN0b3JlRmVhdHVyZSxcbiAgU2lnbmFsU3RvcmVGZWF0dXJlUmVzdWx0LFxuICBTaWduYWxTdG9yZVNsaWNlcyxcbn0gZnJvbSAnLi9zaWduYWwtc3RvcmUtbW9kZWxzJztcbmltcG9ydCB7IFByZXR0aWZ5IH0gZnJvbSAnLi90cy1oZWxwZXJzJztcblxudHlwZSBIb29rRm48SW5wdXQgZXh0ZW5kcyBTaWduYWxTdG9yZUZlYXR1cmVSZXN1bHQ+ID0gKFxuICBzdG9yZTogUHJldHRpZnk8XG4gICAgU2lnbmFsU3RvcmVTbGljZXM8SW5wdXRbJ3N0YXRlJ10+ICZcbiAgICAgIElucHV0WydzaWduYWxzJ10gJlxuICAgICAgSW5wdXRbJ21ldGhvZHMnXSAmXG4gICAgICBTdGF0ZVNpZ25hbDxQcmV0dGlmeTxJbnB1dFsnc3RhdGUnXT4+XG4gID5cbikgPT4gdm9pZDtcblxudHlwZSBIb29rc0ZhY3Rvcnk8SW5wdXQgZXh0ZW5kcyBTaWduYWxTdG9yZUZlYXR1cmVSZXN1bHQ+ID0gKFxuICBzdG9yZTogUHJldHRpZnk8XG4gICAgU2lnbmFsU3RvcmVTbGljZXM8SW5wdXRbJ3N0YXRlJ10+ICZcbiAgICAgIElucHV0WydzaWduYWxzJ10gJlxuICAgICAgSW5wdXRbJ21ldGhvZHMnXSAmXG4gICAgICBTdGF0ZVNpZ25hbDxQcmV0dGlmeTxJbnB1dFsnc3RhdGUnXT4+XG4gID5cbikgPT4ge1xuICBvbkluaXQ/OiAoKSA9PiB2b2lkO1xuICBvbkRlc3Ryb3k/OiAoKSA9PiB2b2lkO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhIb29rczxJbnB1dCBleHRlbmRzIFNpZ25hbFN0b3JlRmVhdHVyZVJlc3VsdD4oaG9va3M6IHtcbiAgb25Jbml0PzogSG9va0ZuPElucHV0PjtcbiAgb25EZXN0cm95PzogSG9va0ZuPElucHV0Pjtcbn0pOiBTaWduYWxTdG9yZUZlYXR1cmU8SW5wdXQsIEVtcHR5RmVhdHVyZVJlc3VsdD47XG5leHBvcnQgZnVuY3Rpb24gd2l0aEhvb2tzPElucHV0IGV4dGVuZHMgU2lnbmFsU3RvcmVGZWF0dXJlUmVzdWx0PihcbiAgaG9va3M6IEhvb2tzRmFjdG9yeTxJbnB1dD5cbik6IFNpZ25hbFN0b3JlRmVhdHVyZTxJbnB1dCwgRW1wdHlGZWF0dXJlUmVzdWx0PjtcblxuZXhwb3J0IGZ1bmN0aW9uIHdpdGhIb29rczxJbnB1dCBleHRlbmRzIFNpZ25hbFN0b3JlRmVhdHVyZVJlc3VsdD4oXG4gIGhvb2tzT3JGYWN0b3J5OlxuICAgIHwge1xuICAgICAgICBvbkluaXQ/OiBIb29rRm48SW5wdXQ+O1xuICAgICAgICBvbkRlc3Ryb3k/OiBIb29rRm48SW5wdXQ+O1xuICAgICAgfVxuICAgIHwgSG9va3NGYWN0b3J5PElucHV0PlxuKTogU2lnbmFsU3RvcmVGZWF0dXJlPElucHV0LCBFbXB0eUZlYXR1cmVSZXN1bHQ+IHtcbiAgcmV0dXJuIChzdG9yZSkgPT4ge1xuICAgIGNvbnN0IHN0b3JlUHJvcHMgPSB7XG4gICAgICBbU1RBVEVfU0lHTkFMXTogc3RvcmVbU1RBVEVfU0lHTkFMXSxcbiAgICAgIC4uLnN0b3JlLnNsaWNlcyxcbiAgICAgIC4uLnN0b3JlLnNpZ25hbHMsXG4gICAgICAuLi5zdG9yZS5tZXRob2RzLFxuICAgIH07XG4gICAgY29uc3QgaG9va3MgPVxuICAgICAgdHlwZW9mIGhvb2tzT3JGYWN0b3J5ID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gaG9va3NPckZhY3Rvcnkoc3RvcmVQcm9wcylcbiAgICAgICAgOiBob29rc09yRmFjdG9yeTtcbiAgICBjb25zdCBjcmVhdGVIb29rID0gKG5hbWU6IGtleW9mIHR5cGVvZiBob29rcykgPT4ge1xuICAgICAgY29uc3QgaG9vayA9IGhvb2tzW25hbWVdO1xuICAgICAgY29uc3QgY3VycmVudEhvb2sgPSBzdG9yZS5ob29rc1tuYW1lXTtcblxuICAgICAgcmV0dXJuIGhvb2tcbiAgICAgICAgPyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoY3VycmVudEhvb2spIHtcbiAgICAgICAgICAgICAgY3VycmVudEhvb2soKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaG9vayhzdG9yZVByb3BzKTtcbiAgICAgICAgICB9XG4gICAgICAgIDogY3VycmVudEhvb2s7XG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICAuLi5zdG9yZSxcbiAgICAgIGhvb2tzOiB7XG4gICAgICAgIG9uSW5pdDogY3JlYXRlSG9vaygnb25Jbml0JyksXG4gICAgICAgIG9uRGVzdHJveTogY3JlYXRlSG9vaygnb25EZXN0cm95JyksXG4gICAgICB9LFxuICAgIH07XG4gIH07XG59XG4iXX0=